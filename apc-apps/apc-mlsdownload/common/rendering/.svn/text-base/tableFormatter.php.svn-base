<?php
// Copyright (C) 2003-2010 National Association of REALTORS(R)
//
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished
// to do so, provided that the above copyright notice(s) and this
// permission notice appear in all copies of the Software and that
// both the above copyright notice(s) and this permission notice
// appear in supporting documentation.

class TableFormatter {

     var $banner;
     var $with_frame;
     var $STYLIST;
     var $noValueIndicator = NO_VALUE_INDICATOR;

     function TableFormatter($with_frame = true) {
          $this->banner = '<!--' . CRLF . 'Auto-generated by ' . PROJECT_NAME . CRLF . '-->' . CRLF;
          $this->with_frame = $with_frame;
          if ($this->with_frame) {
               $this->printBanner();
               print($this->renderStartFrame());
          }
          $this->STYLIST = new Stylist();
     }

     function getNoValueIndicator() {
          return $this->noValueIndicator;
     }

     function printBanner() {
          print($this->banner);
     }

     function finish($runtime = null) {
          if ($this->with_frame) {
               if ($runtime != null) {
                    print($runtime);
               }
               print($this->renderEndFrame());
               $this->printBanner();
          }
     }

     function renderAbout($location = null) {
          return '<table align="center" cellspacing="0" cellpadding="10" border="1" bgcolor="white">' . CRLF .
                 '  <tr align="center">' . CRLF .
                 '    <td>' . CRLF .
                 renderAboutTable() .
                 '<!-- return -->' . CRLF .
                 '<table border="0" cellspacing="0" cellpadding="0">' . CRLF .
                 '  <tr align="left">' . CRLF .
                 '     <td align="center">' . CRLF .
                 $this->formatPseudoButton('Return', $location) . CRLF . 
                 '     </td>' . CRLF .
                 '  </tr>' . CRLF .
                 '</table>' . CRLF .
                 '<!-- return -->' . CRLF .
                 '    </td>' . CRLF .
                 '  </tr>' . CRLF .
                 '</table>' . CRLF;
     }

     function renderStartFrame($override_border = null,
                               $override_color = null,
                               $override_inset = null) {
//
// override if appropriate
//
          if ($override_border == null) {
               $border = FRAME_BORDER;
          } else {
               $border = $override_border;
          }

          if (is_string($override_color)) {
               $color = $override_color;
          } else {
               $color = FRAME_BACKGROUND_COLOR;
          }

          if ($override_inset == null) {
               $inset = FRAME_INSET;
          } else {
               $inset = $override_inset;
          }

//
// render
//
          return '<!-- Frame Top -->' . CRLF .
                 '<table align="center" cellspacing="0" cellpadding="0" ' .
                 'border="' . $border . '" bgcolor="' . $color . '">' . CRLF .
                 '  <tr align="center">' . CRLF .
                 '    <td>' . CRLF .
                 '      <table align="center" cellspacing="' . $inset .
                 '" cellpadding="0" border="0" width="100%">' . CRLF .
                 '<!-- Frame Top -->' . CRLF;
     }

     function renderStartFrameItem() {
          return '        <tr align="center">' . CRLF .
                 '          <td>' . CRLF;
     }

     function renderEndFrameItem() {
          return '          </td>' . CRLF .
                 '        </tr>' . CRLF;
     }

     function renderEndFrame() {
          return '<!-- End Frame -->' . CRLF .
                 '      </table>' . CRLF .
                 '    </td>' . CRLF .
                 '  </tr>' . CRLF .
                 '</table>' . CRLF .
                 '<!-- End Frame -->' . CRLF;
     }

     function directoryWarning($type,
                               $target) {
          return '<li>' .
                 $this->formatText('[' . $type . '] Directory [' . $target . '] not found.') .
                 '</li>';
     }

     function formatLink($message,
                         $override_face = null,
                         $override_point = null,
                         $override_color = null) {
          return '<font style="' .
                 $this->STYLIST->createLinkStyle($override_face,
                                                 $override_point,
                                                 $override_color) .
                 '">' . $message . '</font>';
     }

     function formatBlock($text = null,
                          $override_color = null) {
          $statusColor = null;
          if ($override_color != null) {
              $statusColor = $override_color;
          }
          return 'BLOCK//' .  
                 '<table width="100%" cellspacing="5" cellpadding="0"><tr>' .
                 '<td align="center">' . 
                 $this->STYLIST->formatText($text, $statusColor) .
                 '</td></tr></table>';
     }

     function is_block($item) {
          $pos = strpos($item,'BLOCK//');
          if ($pos === false) {
              return false;
          }

          return substr($item, $pos + 7, strlen($item));
     }

     function formatList($list) {
//
// if there is only one item in the list return it
//
          if (sizeof($list) == 1) {
               return $this->formatText($list[0]);
          }

          $insert = null;
          foreach ($list as $key => $value) {
               $insert .= '<li>' . $this->formatText($value) . '</li>'; 
          }

          return '<table border="0" cellpadding="3" cellspacing="0">' .
                 '<tr><td><ul>' . $insert . '<ul></td></tr>' .
                 '</table>';
     }

     function formatBoldList($list) {
//
// if there is only one item in the list return it
//
          if (sizeof($list) == 1) {
               return $this->formatBoldText($list[0]);
          }

          $insert = null;
          foreach ($list as $key => $value) {
               $insert .= '<li>' .  $this->formatBoldText($value) .  '</li>'; 
          }

          return '<table border="0" cellpadding="3" cellspacing="0">' .
                 '<tr><td><ul>' . $insert . '<ul></td></tr>' .
                 '</table>';
     }

     function formatPseudoLink($message,
                               $override_color = null,
                               $override_points = null,
                               $override_face = null,
                               $with_underline = true) {
          $color = 'purple';
          if (is_string($override_color)) {
               $color = $override_color;
          }

          return '<font style="' .
                 $this->STYLIST->createPseudoLinkStyle($override_face, 
                                                       $override_points,
                                                       $color,
                                                       $with_underline) .
                 '">' .
                 $message .
                 '</font>';
     }

     function determineSelection($field_array,
                                 $value) {
          foreach ($field_array as $key => $val) {
               if ($val == $value) {
                    return $value;
                    break;
               }
          }

//
// pick the first value
//
          foreach ($field_array as $key => $val) {
              return $val;
          }

          return null;
     }

     function formatRadio($variable,
                          $value, 
                          $field_array,
                          $display_text = null,
                          $override_color = null,
                          $override_size = SYSTEM_POINT_SIZE) {
          $buffer = null;
          $selection = $this->determineSelection($field_array, $value);
          foreach ($field_array as $key => $val) {
               $checked = null;
               if ($val == $selection) {
                    $checked = ' checked="checked"';
               }

               $text = null;
               if ($display_text == null) {
                    $text =  $this->formatBoldText($val);
               } else {
                    $style = $this->STYLIST->createPseudoLinkStyle($val,
                                                                   $override_size,
                                                                   $override_color,
                                                                   false); 
                    $text = '<font style="' . $style . '">' .
                            $display_text . '</font>' .
                            ' - ' . $val;
               }

               $buffer .= '<tr><td>' .
                          '<input type="radio" name="' .
                          $variable .
                          '" value="' . $val . '"' .
                          $checked .
                          '>' .
                          $text .
                          '</input>' .
                          '</td></tr>';
          }
          
          return '<table border="0" cellpadding="5">' .
                 $buffer .
                 '</table>';
     }

     function formatRadioField($variable,
                               $value, 
                               $field_array,
                               $title,
                               $withLabels = false) {
          $buffer = null;
          $selection = $this->determineSelection($field_array, $value);
          foreach ($field_array as $key => $val) {
               $checked = null;
               if ($val == $selection) {
                    $checked = ' checked="checked"';
               }

               if ($withLabels) {
                    $label =  $this->formatText($key);
               } else {
                    $label =  $this->formatText($val);
               }

               $buffer .= '<tr><td>' .
                          '<input type="radio" name="' .
                          $variable .
                          '" value="' . $val . '"' .
                          $checked .
                          '>' .
                          $label .
                          '</input>' .
                          '</td></tr>';
          }

          return $this->formatBoldText($title) . CRLF .
                 '</td>' . CRLF .
                 '<td>' . CRLF .
                 '<table border="0" cellpadding="0" cellspacing="0">' . CRLF .
                 $buffer . 
                 '</table>';
     }

     function formatTextField($title,
                              $text) {
          return $this->formatBoldText($title) . CRLF .
                 '</td>' . CRLF .
                 '<td>' . CRLF .
                 $text;
     }

     function formatBinaryField($variable,
                                $value, 
                                $title) {
          if (FORMAT_BINARY_AS_CHECKBOX) {
               return $this->formatCheckboxField($title,
                                                 $value, 
                                                 $variable);
          }

          $binary_values[] = 'true';
          $binary_values[] = 'false';

          return $this->formatRadioField($variable,
                                         $value, 
                                         $binary_values,
                                         $title);
     }
     
     function formatText($message, 
                         $override_color = null,
                         $override_point = null,
                         $override_face = null) {
          return $this->STYLIST->formatText($message, 
                                            $override_color,
                                            $override_point,
                                            $override_face); 
     }

     function formatBoldText($message, 
                             $override_color = null,
                             $override_point = null,
                             $override_face = null) {
          return $this->STYLIST->formatBoldText($message, 
                                                $override_color,
                                                $override_point,
                                                $override_face); 
     }

     function formatColumnSeparation() {
          return $this->STYLIST->formatColumnSeparation();
     }

     function createLink($url, 
                         $visual) {
          if ($url == null) {
               $buffer = 'onclick="history.go(-1)"';
          } else {
               $buffer = 'href="' . $url . '"';
          }
 
          return '<a ' . $buffer . '>' . $visual . '</a>';
     }

     function formatDisplayField($visible_name,
                                 $value,
                                 $override_color = null) {
          return $this->STYLIST->formatBoldText($visible_name, $override_color) . CRLF .
                 $this->STYLIST->formatColumnSeparation() .
                 $this->STYLIST->formatText($value, $override_color);
     }

     function formatHiddenField($variable_name,
                                $value) {
          return '<input type="hidden" name="' . $variable_name . '" value="' . $value . '"/>'; 
     }

     function formatMultiEntryField($variable_name,
                                    $help_url,
                                    $link_text,
                                    $return_url,
                                    $override_color = null) {
//          $url = $help_url .
//                 "&FIELD=" . $variable_name . 
//                 "&LOCATION=" .
//                 "http://" .  $_SERVER["HTTP_HOST"] . $_SERVER["PHP_SELF"];
          $url = $help_url . '&FIELD=' . $variable_name . '&PASSTHRU=' . $return_url;

          return $this->STYLIST->formatBoldText($variable_name, $override_color) . CRLF .
                 $this->STYLIST->formatColumnSeparation() .
                 $this->createLink($url, $this->formatLink($link_text));
     }

     function formatExtendedEntryField($visible_name,
                                       $variable_name,
                                       $value,
                                       $help_url,
                                       $link_text,
                                       $return_url,
                                       $override_color = null,
                                       $any_option = true,
                                       $override_size = null) {
          $url = $help_url .
                 '&FIELD=' . $variable_name . 
                 '&VALUE=' . urlencode($value) .
                 '&PASSTHRU=' . $return_url;
//                 "http://" .  $_SERVER["HTTP_HOST"] . $_SERVER["PHP_SELF"];
          $FIELD = new FieldFormatter($variable_name,
                                      $value,
                                      $override_color,
                                      $override_size);

          return $this->formatBoldText($visible_name) .
                 $this->formatColumnSeparation() .
                 '<table width="100%" cellpadding="0" cellspacing="0" border="0">' .
                 '<tr>' .
                 '<td align="left">' .
                 $FIELD->render(null, $any_option) .
                 '</td>' .
                 '<td align="right">&nbsp;&nbsp;' .
                 $this->createLink($url, $this->formatLink($link_text)) .
                 '</td>' .
                 '</tr>' .
                 '</table>';
     }

     function formatEntryField($visible_name,
                               $variable_name,
                               $field_array,
                               $select_value = null,
                               $override_color = null,
                               $any_option = true,
                               $null_any = false,
                               $dataType = null,
                               $lookupType = null,
                               $override_size = null) {
//
// determine if field is hidden 
//
          if (is_array($field_array)) {
               if (sizeof($field_array) == 1) {
                    foreach ($field_array as $key => $val) {
                         if ($key != 'VISIBLE') {
                              return $this->formatHiddenField($variable_name,
                                                              $val);
                         }
                    }
               }
          }

//
// format the field
//
          $FIELD = new FieldFormatter($variable_name,
                                      $field_array,
                                      $override_color,
                                      $override_size);
          if ($null_any) {
               $buffer = $FIELD->render($select_value,
                                        $any_option,
                                        $this->noValueIndicator,
                                        $dataType,
                                        $lookupType);
          } else {
               $buffer = $FIELD->render($select_value,
                                        $any_option,
                                        null,
                                        $dataType,
                                        $lookupType);
          }

          return $this->STYLIST->formatBoldText($visible_name, $override_color) . CRLF .
                 $this->STYLIST->formatColumnSeparation() .
                 $buffer;
     }

     function formatCheckboxField($title,
                                  $value, 
                                  $variable) {
          $checked = null;
          if ($value == 'true') {
               $checked = ' checked="checked"';
          }

          return $this->STYLIST->formatBoldText($title) .
                 '</td><td>' . 
                 '<input type="checkbox" name="' . $variable . '"' .
                 '" value="' .
                 $value .
                 '"' .
                 $checked .
                 '/></td>';
/*
          return '</td><td>' . 
                 '<input type="checkbox"' .
                 '" name="' . $variable . '"' .
                 '" value="' .
                 $value .
                 '"' .
                 $checked .
                 '>&nbsp;' .
                 $this->STYLIST->formatText($title) .
                 '</td>';
*/

     }
     function formatCheckList($field_array,
                              $selected,
                              $single_value = false,
                              $long_names = null,
                              $cross_reference = false,
                              $notational = null,
                              $notation = null) {
          if ($field_array == null) {
               return null;
          }

          if ($single_value) {
               $type = 'radio';
          } else {
               $type = 'checkbox';
          }

          $items = null;
          $notations = 0;
          foreach ($field_array as $num => $item) {
               if ($single_value) {
                    $name = $single_value;
                    $value = $item;
               } else {
                    $name = $item;
                    $value = true;
               }

//
// check if the item is selected
//                   
               $checked = null;
               if ($selected != null) {
                    if (array_key_exists($item, $selected)) {
                         $checked = ' checked="checked"';
                    }
               }

               $buffer = null;

//
// long names 
//
               if ($long_names == null)
               {
                    $buffer .= $this->STYLIST->formatBoldText($item);
               } else {
                    if (array_key_exists($item, $long_names)) {
                         $buffer .= $this->STYLIST->formatBoldText($long_names[$item]);
                         if ($cross_reference) {
                              $buffer .= $this->STYLIST->formatBoldText(' (' . $item . ')');
                         }
                    } else {
                         if (array_key_exists($num, $long_names)) {
                              $buffer = $this->STYLIST->formatBoldText($long_names[$num]);
                         } else {
                              $buffer = $this->STYLIST->formatBoldText($item);
                         }
                    }
               }

//
// notational
//
               $note = null;
               if ($notational != null) {
                    if (array_key_exists($item, $notational)) {
                         $note = $this->STYLIST->formatBoldText('* ', HIGHLIGHT_FONT_COLOR);
                         ++$notations;
                    }
               }

               $items[] = $note .
                          '</td><td>' . 
                          '<input type="' .
                          $type .
                          '" name="' .
                          $name .
                          '" value="' .
                          $value .
                          '"' .
                          $checked .
                          '>' .
                          '&nbsp;' .
                          $buffer;

          }
//
// if multiple items are allowed, pass along a universe
//
          $mult = null;
          if (!$single_value) {
               $mult = $this->formatHiddenField('UNIVERSE', 
                                                implode(',',$field_array));
          }

//
// generate best rectangle table 
//
          $item_count = sizeof($items);
          $rows = $this->bestSplit($item_count);

          $body = null;
          if ($rows == $item_count || $cross_reference) {
               foreach ($items as $key => $value) {
                    $body .= '<tr><td>' . $value . '</td></tr>';
               }
          } else {
               $columns = $this->bestSplit($item_count,
                                           false);
               $temp = $rows * $columns;
               if ($temp < $item_count) {
                    ++$rows;
               }
               for ($y = 0; $y < $rows; ++$y) {
                    $body .= '<tr>';
                    for ($x = 0; $x < $columns; ++$x) {
                         $offset = $y + (int)($rows * $x);
                         $body .= '<td>';
                         if (array_key_exists($offset, $items)) {
                              $body .= $items[$offset];
                         }
                         $body .= '</td>';
                    }
                    $body .= '</tr>';
               }
          }

//
// put a notation at the bottom  
//
          if ($notation != null) {
               if ($notations > 0) {
                    $body .= '<tr><td colspan="2">&nbsp;</td></tr>' .
                             '<tr><td colspan="2">' . 
                             $this->STYLIST->formatBoldText('* - ' . $notation, HIGHLIGHT_FONT_COLOR);
                             '</td></tr>';
               } else {
                    $body .= '<tr><td colspan="2">&nbsp;</td></tr>' .
                             '<tr><td colspan="2"></td></tr>';
               }
          }

          return '<table width="100%" bgcolor="white" border="0" cellspacing="' .
                 DATA_SPACING .
                 '" cellpadding="' .
                 DATA_PADDING .
                 '">' . CRLF .
                 $body .
                 ' </table>' .
                 $mult;
     }

     function formatListField($title,
                              $text) {
          return $this->formatTextField($title,
                                        $this->formatTextList(explode(',', $text)));
     }

     function formatTextList($items) {
          $body = '<table cellpadding="0" cellspacing="0" border="1">' .
                  '<tr><td>' .
                  '<table cellpadding="2" cellspacing="0" border="0">';
          $item_count = sizeof($items);
          $rows = $this->bestSplit($item_count);
          if ($rows == $item_count) {
               foreach ($items as $key => $value) {
                    $body .= '<tr><td>' . 
                             $this->formatText($value) . 
                             '</td></tr>';
               }
          } else {
               $columns = $this->bestSplit($item_count,
                                           false);
               for ($y = 0; $y < $rows; ++$y) {
                    $body .= '<tr>';
                    for ($x = 0; $x < $columns; ++$x) {
                         $offset = $y + (int)($rows * $x);
                         $body .= '<td>';
                         if (array_key_exists($offset, $items)) {
                              $body .= $this->formatText($items[$offset]);
                         }
                         $body .= '</td>';
                    }
                    $body .= '</tr>';
               }
          }

          $body .= '</table></td></tr></table>';

          return $body;
     }

     function bestSplit($itemCount,
                        $returnRows = true) {
          if ($itemCount < 5) {
               return $itemCount;
          }

          $split = $itemCount;
          $columns = 0;
          $rows = $itemCount;
          $loop = true;
          while ($loop) {
               $columns = round($itemCount / $split);
               $rows = round($itemCount / $columns);
               if ($columns > $rows) {
                    $loop = false;
                    ++$split; 
               } else {
                    --$split; 
               }
          }

          $columns = round($itemCount / $split);
          $rows = round($itemCount / $columns);

          if ($returnRows) {
               return $rows;
          }

          return $columns;
     }

     function renderError($message) {
          return $this->STYLIST->formatBoldSystemText($message, HIGHLIGHT_FONT_COLOR) . CRLF; 
     }

     function renderTitle($message)
     {
          return $this->STYLIST->formatBoldSystemText($message, PROJECT_FONT_COLOR) . CRLF; 
     }

     function translateName($name_translation,
                            $key) {
          if (!$name_translation) {
               return $key;
          }

          $visual = $key . '(?)';
          if ($name_translation != null) {
               if (array_key_exists($key, $name_translation)) { 
                    return $name_translation[$key];
               }
          }

          return $visual;
     }

     function renderNavBar($quit_url) {
          if ($quit_url) {
               $quit = $this->formatPseudoButton('Quit', $quit_url);
          } else {
               $quit = $this->formatPseudoButton('Quit');
          }

          return '<!-- Nav Bar --> ' . CRLF .
                 $this->renderStartFrameItem() .
                 '<table width="100%" bgcolor="' .
                 NAVBAR_BACKGROUND_COLOR .
                 '" border="' .
                 NAVBAR_BORDER .
                 '" cellspacing="0" cellpadding="' .
                 NAVBAR_INSET .
                 '">' . CRLF .
                 '  <tr>' . CRLF .
                 '    <td align="center">' . CRLF .
                 '      <table border="0" cellspacing="0" cellpadding="' .
                 NAVBAR_SPACING .
                 '">' . CRLF .
                 '        <tr>' . CRLF .
                 '          <td align="center">' . CRLF .
                 $this->formatPseudoButton('Back') . CRLF .
                 '          </td>' . CRLF .
                 '          <td align="center">' . CRLF .
                 $quit . CRLF .
                 '          </td>' . CRLF .
                 '        </tr>' . CRLF .
                 '      </table>' . CRLF .
                 '    </td>' . CRLF .
                 '  </tr>' . CRLF .
                 '</table>' . CRLF .
                 $this->renderEndFrameItem() .
                 '<!-- Nav Bar -->' . CRLF;
     }

     function renderStats($runtime) {
          return '<!-- Stats -->' . CRLF .
                 $this->renderStartFrameItem() .
                 $runtime .
                 $this->renderEndFrameItem() .
                 '<!-- Stats -->' . CRLF;
     }

     function formatPseudoButton($name,
                                 $url = null,
                                 $font_color = null,
                                 $background_color = null) {
          $style = $this->STYLIST->createButtonStyle($font_color,
                                                     $background_color);

          if ($url == null) {
               $item = '<a onclick="history.go(-1)"><font style="' . $style . '">' . $name . '</font></a>'; 
          } else {
               $item = '<a href="' . $url . '" ' . 'style="' . $style . '">' . $name . '</a>';
          }

          return '<table border="0" cellspacing="0" cellpadding="2">' .
                 '<tr><td align="center">' . $item . '</td></tr>' .
                 '</table>';
     }

     function printMenu($items,
                        $return_url = null,
                        $bottom_message = null,
                        $top_message = null,
                        $align = null) {
          print($this->renderMenu($items,
                                  $return_url,
                                  $bottom_message,
                                  $top_message,
                                  $align));
     }

     function renderMenu($items,
                         $return_url = null,
                         $bottom_message = null,
                         $top_message = null,
                         $align = null) {
          $buffer = null;
          if (sizeof($items) > 0) {

               $form = null;
               if ($return_url != null) {
                    $form = '<form action="' . $return_url . '">' . CRLF;
               }

               $retButton = null;
               if ($return_url != null) {
                    $retButton = '<!-- Buttons -->' . CRLF .
                                 $this->renderStartInnerFrameItem() .
                                 '<input type="submit" value="Quit"/>' . CRLF .
                                 $this->renderEndInnerFrameItem() .
                                 '<!-- Buttons -->' . CRLF .
                                 '</form>' . CRLF;
               }

               $list = null;
               foreach ($items as $key => $val) {
                    $pos = strpos($val,'hidden');
                    if (!$pos) {
                         $list .= $this->renderStartInnerFrameItem(null, 
                                                                   $align);
                    }
                    $list .= $val . CRLF;
                    if (!$pos) {
                         $list .= $this->renderEndInnerFrameItem();
                    }
               }

               $buffer = $this->renderStartInnerFrame() .
                         $form .
                         '<!-- Items -->' . CRLF .
                         $list .
                         '<!-- Items -->' . CRLF .
                         $retButton .
                         $this->renderEndInnerFrame();
          }

          return '<!-- Menu -->' . CRLF .
                 $this->renderStartFrameItem() .
                 $this->renderStartPanel($top_message) .
                 $buffer .
                 $this->renderEndPanel($bottom_message) .
                 $this->renderEndFrameItem() .
                 '<!-- Menu -->' . CRLF;
     }

     function printNotice($items,
                          $submit_url,
                          $bottom_message = null,
                          $top_message = null,
                          $withQuit = false,
                          $submitText = null) {
          print($this->renderNotice($items,
                                    $submit_url,
                                    $bottom_message,
                                    $top_message,
                                    $withQuit,
                                    $submitText));
     }

     function renderNotice($items,
                           $submit_url,
                           $bottom_message = null,
                           $top_message = null,
                           $withQuit = false,
                           $submitText = null) {

//
// determine total items that are visible 
//
          $item_count = sizeof($items);
          $visible_count = 0;
          for ($i = 0; $i < $item_count; ++$i ) {
               if ($this->priv_is_item_visible($items[$i])) {
                    ++$visible_count;
               }
          }

//
// content table 
//
          $buffer = null;
          $isShaded = false;
          for ($i = 0; $i < $item_count; ++$i ) {
               $variableName = $items[$i];
               if ($this->priv_is_item_visible($variableName)) {
                    if ($isShaded) {
                         $aColor = null;
                         $isShaded = false;
                    } else {
                         $aColor = 'bgcolor="white"';
                         if ($visible_count > 2) {
                              $isShaded = true;
                         }
                    }
                    $isBlock = $this->is_block($variableName);
                    if ($isBlock) {
                         $buffer .= '<tr ' . $aColor . ' align="center"><td colspan="2">' . CRLF;
                         $variableName = $isBlock;
                    } else {
                         $valign = 'middle';
                         $buffer .= '  <tr align="left" valign="' . $valign . '" ' . $aColor . '>' . CRLF .
                                    '    <td>' . CRLF;
//echo '<XMP>B ' . $buffer . ' </XMP>';
                    }
               }
               $buffer .= $variableName . CRLF;
               if ($this->priv_is_item_visible($variableName)) {
                    $buffer .= '    </td>' . CRLF .
                               '  </tr>' . CRLF;
               }
          }

          return '<!-- Form -->' . CRLF .
                 $this->renderStartFrameItem() .
                 $this->renderStartPanel($top_message) .
                 $this->renderStartInnerFrame() .
                 '<form action="' .
                 $submit_url .
                 '" method="POST">' . CRLF .
                 '<!-- Content Table -->' . CRLF .
                 $this->renderStartInnerFrameItem() .
                 '<table align="center" cellspacing="' .
                 DATA_SPACING .
                 '" cellpadding="' .
                 DATA_PADDING .
                 '" border="' .
                 DATA_BORDER .
                 '" bgcolor="' .
                 DATA_BACKGROUND_COLOR .
                 '">' . CRLF .
                 $buffer .
                 '</table>' . CRLF .
                 $this->renderEndInnerFrameItem() .
                 '<!-- Content Table -->' . CRLF .
                 $this->renderNoticeButtons($withQuit, $submitText) .
                 '</form>' . CRLF .
                 $this->renderEndInnerFrame() .
                 $this->renderEndPanel($bottom_message) .
                 $this->renderEndFrameItem() .
                 '<!-- Form -->' . CRLF;
     }

     function renderNoticeButtons($withQuit = false,
                                  $submitText = null) {
          $quitButton = null;
          if ($withQuit) {
               $quitButton = '<td align="center"><input type="submit" name="CANCEL" value="Quit"/></td>' . CRLF;
          }
          if ($submitText == null) {
               $submitText = 'OK';
          }
          return '<!-- Buttons -->' . CRLF .
                 $this->renderStartInnerFrameItem() .
                 '<table width="100%" border="0" cellspacing="0" cellpadding="' .
                 NAVBAR_INSET .
                 '">' . CRLF .
                 '  <tr>' . CRLF .
                 '    <td align="center">' . CRLF .
                 '      <table border="0" cellspacing="0" cellpadding="' .
                 NAVBAR_SPACING .
                 '">' . CRLF .
                 '        <tr>' . CRLF .
                 '<td align="center"><input type="submit" name="SUBMIT" value="' . $submitText . '"/></td>' . CRLF .
                 $quitButton .
                 '        </tr>' . CRLF .
                 '      </table>' . CRLF .
                 '    </td>' . CRLF .
                 '  </tr>' . CRLF .
                 '</table>' . CRLF .
                 $this->renderEndInnerFrameItem() .
                 '<!-- Buttons -->' . CRLF;
     }

     function printForm($items,
                        $submit_url,
                        $bottom_message = null,
                        $top_message = null,
                        $simulate = false,
                        $withClear = false,
                        $withAll = false,
                        $valign = null,
                        $callback = null,
                        $makeTopButtons = false) {
          print($this->renderForm($items,
                                  $submit_url,
                                  $bottom_message,
                                  $top_message,
                                  $simulate,
                                  $withClear,
                                  $withAll,
                                  false,
                                  $valign,
                                  $callback,
                                  $makeTopButtons));
     }

     function renderForm($items,
                         $submit_url,
                         $bottom_message = null,
                         $top_message = null,
                         $simulate = false,
                         $withClear = false,
                         $withAll = false,
                         $pageNumbers = false,
                         $verticalAlign = null,
                         $callback = null,
                         $makeTopButtons = false) {

//
// page numbers 
//
          if ($pageNumbers === false) {
          } else {
echo '<XMP>PAGE $pageNumbers</XMP>';
          }

//
// top buttons
//
          $topButtons = null;
          if ($makeTopButtons) {
               $topButtons = $this->renderFormButtons($simulate, $withClear, $withAll);
          }

//
// add a "callback" link
//
          if ($withClear || $withAll) {
               if ($callback != null) {
//               $items[] = $this->formatHiddenField("FROM",  
//                                                   "./" .  basename($_SERVER["PHP_SELF"]));
                    $items[] = $this->formatHiddenField('FROM',  $callback);
               }
          }

//
// determine total items that are visible 
//
          $item_count = sizeof($items);
          $visible_count = 0;
          for ($i = 0; $i < $item_count; ++$i ) {
               if ($this->priv_is_item_visible($items[$i])) {
                    ++$visible_count;
               }
          }

//
// content table 
//
          $buffer = null;
          $isShaded = false;
          for ($i = 0; $i < $item_count; ++$i ) {
               $variableName = $items[$i];
               if ($this->priv_is_item_visible($variableName)) {
                    if ($isShaded) {
                         $aColor = null;
                         $isShaded = false;
                    } else {
                         $aColor = 'bgcolor="white"';
                         if ($visible_count > 2) {
                              $isShaded = true;
                         }
                    }
                    $isBlock = $this->is_block($variableName);
                    if ($isBlock) {
                         $buffer .= '<tr ' . $aColor . ' align="center"><td colspan="2">' . CRLF;
                         $variableName = $isBlock;
                    } else {
                         $valign = null;
                         if ($verticalAlign != null) {
                              if (array_key_exists($variableName, $verticalAlign)) {
                                   $valign = $verticalAlign[$variableName];
                              }
                         }
                         if ($valign == null) {
                              $valign = 'middle';
                         }
                         $buffer .= '  <tr align="left" valign="' . $valign . '" ' . $aColor . '>' . CRLF .
                                    '    <td>' . CRLF;
//echo '<XMP>B ' . $buffer . ' </XMP>';
                    } 
               }
               $buffer .= $variableName . CRLF;
               if ($this->priv_is_item_visible($variableName)) {
                    $buffer .= '    </td>' . CRLF .
                               '  </tr>' . CRLF;
               }
          }

          return '<!-- Form -->' . CRLF .
                 $this->renderStartFrameItem() .
                 $this->renderStartPanel($top_message) .
                 $this->renderStartInnerFrame() .
                 '<form action="' .
                 $submit_url .
                 '" method="POST">' . CRLF .
                 $topButtons .
                 '<!-- Content Table -->' . CRLF .
                 $this->renderStartInnerFrameItem() .
                 '<table align="center" cellspacing="' .
                 DATA_SPACING .
                 '" cellpadding="' .
                 DATA_PADDING .
                 '" border="' .
                 DATA_BORDER .
                 '" bgcolor="' .
                 DATA_BACKGROUND_COLOR .
                 '">' . CRLF .
                 $buffer .
                 '</table>' . CRLF .
                 $this->renderEndInnerFrameItem() .
                 '<!-- Content Table -->' . CRLF .
                 $this->renderFormButtons($simulate, 
                                          $withClear,
                                          $withAll) .
                 '</form>' . CRLF .
                 $this->renderEndInnerFrame() .
                 $this->renderEndPanel($bottom_message) .
                 $this->renderEndFrameItem() .
                 '<!-- Form -->' . CRLF;
     }

     function priv_is_item_visible($item) {
          if (strpos($item,'hidden')) {
               if (strpos($item,'table')) {
                   return true;
               }
               return false;
          }
          return true;
     }

     function renderFormButtons($simulate = false,
                                $withClear = false,
                                $withAll = false) {
          $button = null;
          if ($simulate) {
               $button['apply'] = $this->formatPseudoButton('Apply');
               $button['quit'] = $this->formatPseudoButton('Quit');
               $button['reset'] = $this->formatPseudoButton('Reset');
               $button['clear'] = $this->formatPseudoButton('Clear');
               $button['all'] = $this->formatPseudoButton('All');
          } else {
               $button['apply'] = '<input type="submit" name="SUBMIT" value="Apply"/>';
               $button['quit'] = '<input type="submit" name="CANCEL" value="Quit"/>';
               $button['reset'] = '<input type="reset"/>';
               $button['clear'] = '<input type="submit" name="CLEAR" value="Clear"/>';
               $button['all'] = '<input type="submit" name="ALL" value="All"/>';
          }

          $all = null;
          if ($withAll) {
               $all = '<td align="center">' . $button['all'] . '</td>' . CRLF;
          }
          $clear = null;
          if ($withClear) {
               $clear = '<td align="center">' . $button['clear'] . '</td>' . CRLF;
          }

          return '<!-- Buttons -->' . CRLF .
                 $this->renderStartInnerFrameItem() .
                 '<table width="100%" border="0" cellspacing="0" cellpadding="' .
                 NAVBAR_INSET .
                 '">' . CRLF .
                 '  <tr>' . CRLF .
                 '    <td align="center">' . CRLF .
                 '      <table border="0" cellspacing="0" cellpadding="' .
                 NAVBAR_SPACING .
                 '">' . CRLF .
                 '        <tr>' . CRLF .
                 '<td align="center">' . $button['apply'] . '</td>' . CRLF .
                 '<td align="center">' . $button['quit'] . '</td>' . CRLF .
                 '<td align="center">&nbsp;</td>' . CRLF .
                 $all .
                 '<td align="center">' . $button['reset'] . '</td>' . CRLF .
                 $clear .
                 '        </tr>' . CRLF .
                 '      </table>' . CRLF .
                 '    </td>' . CRLF .
                 '  </tr>' . CRLF .
                 '</table>' . CRLF .
                 $this->renderEndInnerFrameItem() .
                 '<!-- Buttons -->' . CRLF;
     }

     function renderStartPanel($message = null,
                               $aBorder = null,
                               $aBackground = null) {

          if ($aBorder == null) {
               $border = PANEL_BORDER;
          } else {
               $border = $aBorder;
          }

          if ($aBackground == null) {
               $background = PANEL_BACKGROUND_COLOR;
          } else {
               $background = $aBackground;
          }

          $buffer = null;
          if ($message != null) {
               $buffer = '  <tr align="center">' . CRLF .
                         '    <td>' . CRLF .
                         $this->renderError($message) .
                         '    </td>' . CRLF .
                         '  </tr>' . CRLF;
          }

          return '<!-- Start Panel -->' . CRLF .
                 '<table align="center" cellspacing="0" cellpadding="' .
                 PANEL_INSET .
                 '" border="' .
                 $border .
                 '" bgcolor="' .
                 $background .
                 '" width="100%">' . CRLF .
                 $buffer .
                 '<!-- Start Panel -->' . CRLF;
     }

     function renderStartPanelItem($colspan = null) {
          $span = null;
          if ($colspan != null) {
               $span = ' colspan="' . $colspan . '"';
          }
          return '  <tr align="center">' . CRLF .
                 '    <td' . $span . '>' . CRLF;
     }

     function renderStartInnerFrame() {
          return '<!-- Begin Inner Frame -->' . CRLF .
                 $this->renderStartPanelItem() .
                 '      <table align="center" cellspacing="0" cellpadding="' .
                 PANEL_SPACING .
                 '" border="0" width="100%">' . CRLF .
                 '<!-- Begin Inner Frame -->' . CRLF;
     }

     function renderStartInnerFrameItem($colspan = null,
                                        $align = null) {
          $type = "center";
          if ($align != null) {
               $type = $align;
          }

          $span = null;
          if ($colspan != null) {
               $span = ' colspan="' . $colspan . '"';
          }

          return '        <tr align="' . $type . '">' . CRLF .
                 '          <td' . $span . '>' . CRLF;
     }

     function renderEndInnerFrameItem() {
          return '          </td>' . CRLF .
                 '        </tr>' . CRLF;
     }

     function renderEndInnerFrame() {
          return '<!-- End Inner Frame -->' . CRLF .
                 '      </table>' . CRLF .
                 $this->renderEndPanelItem() .
                 '<!-- End Inner Frame -->' . CRLF;
     }

     function renderEndPanelItem() {
          return '    </td>' . CRLF .
                 '  </tr>' . CRLF;
     }

     function renderEndPanel($message = null) {
          $text = null;
          if ($message != null) {
               $text = '  <tr align="center">' . CRLF .
                       '    <td>' . CRLF .
                       $this->renderError($message) .
                       '    </td>' . CRLF .
                       '  </tr>' . CRLF;
          }

          return '<!-- End Panel -->' . CRLF .
                 $text .
                 '</table>' . CRLF . 
                 '<!-- End Panel -->' . CRLF;
     }

}

?>
